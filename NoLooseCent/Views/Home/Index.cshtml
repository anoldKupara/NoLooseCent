@model NoLooseCent.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<!-- Google Fonts & Icons -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: #f5f5f9;
    }

    .card-custom {
        border: none;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(50, 50, 93, 0.05);
        transition: 0.3s;
    }

        .card-custom:hover {
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        }

    .text-muted-sm {
        font-size: 0.85rem;
        color: #888;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 20px;
    }
</style>

<div class="container-fluid px-4">
    <!-- Greeting Section -->
    <div class="row mb-4">
        <div class="col-lg-12">
            <div class="card card-custom p-4 d-flex flex-row align-items-center justify-content-between bg-white">
                <div>
                    <h4 class="mb-1">Welcome Back, @ViewBag.FullName 👋</h4>
                    <p class="text-muted-sm">Here's your financial overview</p>
                </div>
                <i class="fas fa-coins fa-2x text-primary"></i>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="card card-custom bg-white p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted-sm">Total USD Income</small>
                        <h4 class="mb-0">@Model.TotalUsdIncome.ToString("C")</h4>
                    </div>
                    <i class="fas fa-arrow-down fa-lg text-success"></i>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-custom bg-white p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted-sm">Total USD Expense</small>
                        <h4 class="mb-0">@Model.TotalUsdExpense.ToString("C")</h4>
                    </div>
                    <i class="fas fa-arrow-up fa-lg text-danger"></i>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-custom bg-white p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted-sm">USD Balance</small>
                        <h4 class="mb-0">@Model.UsdBalance.ToString("C")</h4>
                    </div>
                    <i class="fas fa-wallet fa-lg text-primary"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="card card-custom bg-white p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted-sm">Total ZWL Income</small>
                        <h4 class="mb-0">@Model.TotalZwlIncome.ToString("N2") ZWL</h4>
                    </div>
                    <i class="fas fa-arrow-down fa-lg text-success"></i>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-custom bg-white p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted-sm">Total ZWL Expense</small>
                        <h4 class="mb-0">@Model.TotalZwlExpense.ToString("N2") ZWL</h4>
                    </div>
                    <i class="fas fa-arrow-up fa-lg text-danger"></i>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-custom bg-white p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted-sm">ZWL Balance</small>
                        <h4 class="mb-0">@Model.ZwlBalance.ToString("N2") ZWL</h4>
                    </div>
                    <i class="fas fa-wallet fa-lg text-primary"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Chart Section: Two Pie Charts -->
    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card card-custom p-4 bg-white">
                <h5 class="section-title">USD Income vs Expense</h5>
                <canvas id="usdChart" style="max-height: 300px;"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card card-custom p-4 bg-white">
                <h5 class="section-title">ZWL Income vs Expense</h5>
                <canvas id="zwlChart" style="max-height: 300px;"></canvas>
            </div>
        </div>
    </div>

    <!-- Recent Transactions -->
    <div class="card card-custom bg-white mb-5">
        <div class="card-body">
            <h5 class="section-title">Recent Transactions</h5>
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>Currency</th>
                        <th>Source / Purpose</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.RecentTransactions)
                    {
                        <tr>
                            <td>@item.Date.ToString("yyyy-MM-dd")</td>
                            <td>
                                <span class="badge bg-@(item.Type == "Income" ? "success" : "danger")">@item.Type</span>
                            </td>
                            <td>@item.Amount.ToString("N2")</td>
                            <td>@item.CurrencyName</td>
                            <td>@item.SourceOrPurpose</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Chart.js and Plugin -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

<script>
    window.onload = function () {
        Chart.register(ChartDataLabels);

        const usdCtx = document.getElementById('usdChart').getContext('2d');
        const zwlCtx = document.getElementById('zwlChart').getContext('2d');

        const usdIncome = parseFloat("@Model.TotalUsdIncome");
        const usdExpense = parseFloat("@Model.TotalUsdExpense");
        const zwlIncome = parseFloat("@Model.TotalZwlIncome");
        const zwlExpense = parseFloat("@Model.TotalZwlExpense");

        new Chart(usdCtx, {
            type: 'pie',
            data: {
                labels: ['Income', 'Expense'],
                datasets: [{
                    data: [usdIncome, usdExpense],
                    backgroundColor: ['#00cfe8', '#ea5455']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'bottom' },
                    datalabels: {
                        formatter: (value, context) => {
                            const data = context.chart.data.datasets[0].data;
                            const total = data.reduce((a, b) => a + b, 0);
                            const percentage = (value / total * 100).toFixed(1) + '%';
                            return percentage;
                        },
                        color: '#fff',
                        font: {
                            weight: 'bold',
                            size: 14
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });

        new Chart(zwlCtx, {
            type: 'pie',
            data: {
                labels: ['Income', 'Expense'],
                datasets: [{
                    data: [zwlIncome, zwlExpense],
                    backgroundColor: ['#00cfe8', '#ea5455']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'bottom' },
                    datalabels: {
                        formatter: (value, context) => {
                            const data = context.chart.data.datasets[0].data;
                            const total = data.reduce((a, b) => a + b, 0);
                            const percentage = (value / total * 100).toFixed(1) + '%';
                            return percentage;
                        },
                        color: '#fff',
                        font: {
                            weight: 'bold',
                            size: 14
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    };
</script>